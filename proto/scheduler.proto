syntax = "proto3";
package pb;
option go_package = "github.com/mykube-run/keel/pkg/pb";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "common.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Keel Scheduler API";
    version: "1.0";
    contact: {
      name: "Keel project";
      url: "https://github.com/mykube-run/keel";
    };
  };
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
};

service ScheduleService {
  // Tenant API
  rpc CreateTenant (CreateTenantRequest) returns (Response) {
    option (google.api.http) = {
      post: "/v1/tenants",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Create new tenant";
      summary: "Create a new tenant";
      tags: "Tenant API";
    };
  };

  rpc QueryTenantTaskConcurrency (QueryTenantTaskConcurrencyRequest) returns (QueryTenantTaskConcurrencyResponse) {
    option (google.api.http) = {
      post: "/v1/tenants/task-concurrency",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Query tenant task status";
      summary: "Query tenant task status";
      tags: "Tenant API";
    };
  };

  // Task API
  rpc CreateTask (CreateTaskRequest) returns (Response) {
    option (google.api.http) = {
      post: "/v1/tasks",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Create new task";
      summary: "Create a new task";
      tags: "Task API";
    };
  };

  rpc PauseTask (PauseTaskRequest) returns (Response) {
    option (google.api.http) = {
      post: "/v1/tasks/pause",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Pause task";
      summary: "Pause the specified task";
      tags: "Task API";
    };
  };

  rpc RestartTask (RestartTaskRequest) returns (Response) {
    option (google.api.http) = {
      post: "/v1/tasks/restart",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Restart task";
      summary: "Restart the specified task";
      tags: "Task API";
    };
  };

  rpc StopTask (StopTaskRequest) returns (Response) {
    option (google.api.http) = {
      post: "/v1/tasks/stop",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Close task";
      summary: "Close the specified task";
      tags: "Task API";
    };
  };

  rpc QueryTaskStatus (QueryTaskStatusRequest) returns (QueryTaskStatusResponse) {
    option (google.api.http) = {
      post: "/v1/tasks/status",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Query task status";
      summary: "Query the specified task status";
      tags: "Task API";
    };
  };
}

// Tenant API request & response

message CreateTenantRequest {
  // Tenant uid, must be unique across different zones
  string uid = 1 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Tenant uid, must be unique",
    max_length: 255,
    min_length: 1
  }];

  // Tenant zone
  string zone = 2 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The zone that the tenant should be scheduled in",
    max_length: 20,
    min_length: 1
  }];

  // Tenant priority
  int32 priority = 3 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Tenant priority"
  }];

  // Tenant name
  string name = 4 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Tenant name, does not need to be unique",
    max_length: 100,
    min_length: 1
  }];

  // Tenant resource quota
  ResourceQuota quota = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Tenant resource quota options. Resource quotas are optional, 0 means there is no limit for specified resource type"
  }];
}

message QueryTenantTaskConcurrencyRequest {
  // Tenant uid
  string uid = 1 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Tenant uid, must be unique",
    max_length: 255,
    min_length: 1
  }];
}

message QueryTenantTaskConcurrencyResponse {
  Code code = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Response code"
  }];
  int64 running = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The number of specified tenant's running tasks"
  }];
  int64 pending = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The number of specified tenant's pending tasks"
  }];
  int64 limit = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "The number of specified tenant's concurrency limit"
  }];
}

// Task API request & response

message CreateTaskRequest {
  // Create task options
  CreateTaskOptions options = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Create task options, optional"
  }];

  // Task type
  // Deprecated since v0.1.6, will be removed in the future
  string type = 2 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Task type, available options are: CronTask, DelayTask, UserTask"
  }];

  // Tenant id
  string tenant_id = 3 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Tenant uid that this task belongs to",
    max_length: 255,
    min_length: 1
  }];

  // Task uid
  string uid = 4 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Task uid, must be unique",
    max_length: 255,
    min_length: 1
  }];

  // Task handler
  string handler = 5 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Task handler name, user defined",
    max_length: 100,
    min_length: 1
  }];

  // Task config
  string config = 6 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Task configuration in JSON",
    default: "{}"
  }];

  // Task schedule strategy
  string schedule_strategy = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Task schedule strategy, TODO",
    max_length: 10,
    min_length: 1
  }];

  // Task priority
  int32 priority = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Task priority"
  }];
}

message CreateTaskOptions {
  // Whether to check tenant's resource quota while creating a new task
  bool check_resource_quota = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Whether to check resource quota while creating a new task"
  }];
}

message PauseTaskRequest {
  // Task type
  // Deprecated since v0.1.6, will be removed in the future
  string type = 1 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Task type, available options are: CronTask, DelayTask, UserTask"
  }];

  // Task uid
  string uid = 2 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Task uid, must be unique",
    max_length: 255,
    min_length: 1
  }];

  // Tenant uid
  string tenant_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Tenant uid that this task belongs to",
    max_length: 255,
    min_length: 1
  }];
}

message RestartTaskRequest {
  // Task type
  // Deprecated since v0.1.6, will be removed in the future
  string type = 1 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Task type, available options are: CronTask, DelayTask, UserTask"
  }];

  // Task uid
  string uid = 2 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Task uid, must be unique",
    max_length: 255,
    min_length: 1
  }];

  // Tenant uid
  string tenant_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Tenant uid that this task belongs to",
    max_length: 255,
    min_length: 1
  }];
}

message QueryTaskStatusRequest {
  // Task type
  // Deprecated since v0.1.6, will be removed in the future
  string type = 1 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Task type, available options are: CronTask, DelayTask, UserTask"
  }];

  // Task uid
  string uid = 2 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Task uid, must be unique",
    max_length: 255,
    min_length: 1
  }];

  // Tenant uid
  string tenant_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Tenant uid that this task belongs to",
    max_length: 255,
    min_length: 1
  }];
}

message QueryTaskStatusResponse {
  Code code = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Response code"
  }];
  string status = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Task status, possible values are: Pending, Scheduling, Dispatched, Running, NeedsRetry, InTransition, Success, Failed, Canceled"
  }];
}

message StopTaskRequest {
  // Task type
  // Deprecated since v0.1.6, will be removed in the future
  string type = 1 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Task type, available options are: CronTask, DelayTask, UserTask"
  }];

  // Task uid
  string uid = 2 [(google.api.field_behavior) = REQUIRED, (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Task uid, must be unique",
    max_length: 255,
    min_length: 1
  }];

  // Tenant uid
  string tenant_id = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    description: "Tenant uid that this task belongs to",
    max_length: 255,
    min_length: 1
  }];
}

