# Docker compose specification:
# https://docs.docker.com/compose/compose-file/#services-top-level-element
version: '3'

networks:
  test:
    driver: bridge

services:
  # Kafka (enabled KRaft )
  # See: https://hub.docker.com/r/bitnami/kafka/
  kafka:
    image: bitnami/kafka:3.3.1
    environment:
      KAFKA_BROKER_ID: '1'
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CFG_NUM_PARTITIONS: 3

      KAFKA_ENABLE_KRAFT: 'yes'
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CFG_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093'
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '1@127.0.0.1:9093'
    restart: 'on-failure'
    networks:
      - test

  # Kafka UI
  # See: https://hub.docker.com/r/rsmnarts/kowl
  kafka-ui:
    image: rsmnarts/kowl:latest
    environment:
      KAFKA_BROKERS: 'kafka:9092'
    restart: 'on-failure'
    ports:
      - '8080:8080'
    networks:
      - test
    depends_on:
      - kafka

  # Minio object storage
  # See: https://hub.docker.com/r/bitnami/minio/
  minio:
    image: bitnami/minio:2022.12.12
    environment:
      MINIO_DEFAULT_BUCKETS: snapshots
      MINIO_ROOT_USER: 'root'
      MINIO_ROOT_PASSWORD: 'pa88w0rd'
    restart: 'on-failure'
    networks:
      - test

  # MongoDB
  # See: https://hub.docker.com/r/bitnami/mongodb
  # Bitnami mongodb may not be working on M1 chips, so we use official image
  #
  # mongodb:
  #   image: bitnami/mongodb:5.0
  #   environment:
  #     MONGODB_DATABASE: 'keel'
  #     MONGODB_ROOT_USER: 'root'
  #     MONGODB_ROOT_PASSWORD: 'pa88w0rd'
  #     MONGODB_REPLICA_SET_MODE: 'primary'
  #     MONGODB_REPLICA_SET_KEY: 'random-key'
  #   restart: 'on-failure'
  #   networks:
  #     - test
  mongodb:
    image: mongo:5.0.14
    environment:
      MONGO_INITDB_DATABASE: 'keel'
      MONGO_INITDB_ROOT_USERNAME: 'root'
      MONGO_INITDB_ROOT_PASSWORD: 'pa88w0rd'
    restart: 'on-failure'
    healthcheck:
      test: 'mongo mongodb://root:pa88w0rd@monogdb:27017'
      interval: '10s'
      timeout: '1s'
      retries: 24
    networks:
      - test

  # MySQL database
  # See: https://hub.docker.com/r/bitnami/mysql/
  mysql:
    image: bitnami/mysql:8.0.31
    environment:
      MYSQL_ROOT_USER: 'root'
      MYSQL_ROOT_PASSWORD: 'pa88w0rd'
      MYSQL_CHARACTER_SET: 'utf8mb4'
      MYSQL_COLLATE: 'utf8mb4_unicode_ci'
      MYSQL_DATABASE: 'keel'
    restart: 'on-failure'
    healthcheck:
      test: 'mysql --host=mysql --user=root --password=pa88w0rd --database=keel'
      interval: '10s'
      timeout: '1s'
      retries: 24
    networks:
      - test

  # Initialize MySQL database
  # See: https://hub.docker.com/r/bitnami/mysql/
  init-mysql:
    image: bitnami/mysql:8.0.31
    command: 'mysql --verbose --host=mysql --user=root --password=pa88w0rd --database=keel --execute="source /tmp/schema.sql"'
    volumes:
      - ./docs/schema/schema.sql:/tmp/schema.sql
    restart: 'on-failure'
    networks:
      - test
    depends_on:
      mysql:
        condition: 'service_healthy'

  # Keel scheduler
  scheduler:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        BUILD_TARGET: './tests/integration/scheduler'
    env_file:
      - ./tests/test.env
    restart: 'on-failure'
    networks:
      - test
    depends_on:
      kafka:
        condition: 'service_started'
      mysql:
        condition: 'service_healthy'
      init-mysql:
        condition: 'service_completed_successfully'
      minio:
        condition: 'service_started'

  # Keel worker
  worker:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        BUILD_TARGET: './tests/integration/worker'
    env_file:
      - ./tests/test.env
    restart: 'on-failure'
    networks:
      - test
    depends_on:
      kafka:
        condition: 'service_started'
      minio:
        condition: 'service_started'
      mysql:
        condition: 'service_healthy'
      init-mysql:
        condition: 'service_completed_successfully'

  # Test
  test:
    build:
      context: .
      dockerfile: ./Dockerfile_integration_test
    env_file:
      - ./tests/test.env
    restart: 'no'
    networks:
      - test
    depends_on:
      kafka:
        condition: 'service_started'
      minio:
        condition: 'service_started'
      mongodb:
        condition: 'service_started'
      mysql:
        condition: 'service_healthy'
      init-mysql:
        condition: 'service_completed_successfully'
      scheduler:
        condition: 'service_started'
      worker:
        condition: 'service_started'
